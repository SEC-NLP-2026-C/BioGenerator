from flask import Flask, request, jsonify, render_template
import os
import json
from dotenv import load_dotenv
import google.generativeai as genai
from google.ai.generativelanguage_v1beta.types import content

# Custom module for the Gemini model
from model.gemini_model import GeminiModel

# Load environment variables (e.g., API keys and configurations)
load_dotenv("model\\secrets.env")

# Configure the Gemini API with the loaded API key
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Initialize the Flask application
app = Flask(__name__)

@app.route("/")
def index():
    """
    Renders the main landing page of the application.
    """
    return render_template("index.html")

@app.route("/generate", methods=["POST"])
def generate_content():
    """
    API endpoint to generate content based on user inputs.

    Expects a JSON payload with the following keys:
        - career
        - personality
        - interests
        - relationship_goals

    Returns:
        - A JSON response with a topic and description generated by the Gemini model.
        - HTTP 400 if required fields are missing.
        - HTTP 500 for server-side errors.
    """
    try:
        # Parse input JSON data from the request
        data = request.json
        career = data.get("career")
        personality = data.get("personality")
        interests = data.get("interests")
        relationship_goals = data.get("relationship_goals")

        # Validate that all required fields are present
        if not (career and personality and interests and relationship_goals):
            return jsonify({"error": "All fields are required"}), 400

        # Create an instance of the GeminiModel to generate content
        model = GeminiModel()

        # Generate content based on the provided inputs
        output_topic, output_description = model.generate_response(
            career=career, 
            personality=personality, 
            interests=interests, 
            relationship_goals=relationship_goals
        )

        # Return the generated content as a JSON response
        return jsonify({
            "topic": output_topic,
            "description": output_description
        })

    except Exception as e:
        # Retry the content generation for specific errors
        if "Expecting value" or "line" in str(e):
            return generate_content()
        else:
            # Handle other exceptions and return an error response
            return jsonify({"error": str(e)}), 500

# Run the Flask application in debug mode
if __name__ == "__main__":
    app.run()
